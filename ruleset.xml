<?xml version="1.0"?>
<ruleset name="Snap">
	<description>The Snap Interactive coding standard.</description>

	<rule ref="Generic"><!-- run all of the Generic rules except these excludes -->

		<!-- dos or unix EOL are allowed.
			Do we need a new sniff for EOL consistency? -->
		<exclude name="Generic.Files.LineEndings"/>

		<!-- TODOs are allowed -->
		<exclude name="Generic.Commenting.Todo"/>

		<exclude name="Generic.WhiteSpace.DisallowTabIndent"/>

		<!-- This sniff enforces TRUE, FALSE and NULL in caps. Yech. -->
		<exclude name="Generic.PHP.UpperCaseConstant"/>

		<!-- Use K&R style -->
		<exclude name="Generic.Functions.OpeningFunctionBraceBsdAllman"/>
		<!-- but don't enforce spacing for now... -->
		<exclude name="Generic.Functions.OpeningFunctionBraceKernighanRitchie"/>

		<!-- Don't require pretty alignment in successive assignments -->
		<exclude name="Generic.Formatting.MultipleStatementAlignment"/>

		<!-- Don't require a space after cast operator -->
		<exclude name="Generic.Formatting.SpaceAfterCast"/>

	</rule>

	<rule ref="Generic.Files.LineLength">
		<properties>
			<property name="lineLimit" value="110"/>
			<property name="absoluteLineLimit" value="0"/>
		</properties>
	</rule>

	<!-- with tab indents it's 1 tab per level -->
	<rule ref="Generic.WhiteSpace.ScopeIndent">
		<properties>
			<property name="indent" value="1"/>
		</properties>
	</rule>

	<!-- good stuff from Squiz -->
	<rule ref="Squiz.Arrays.ArrayBracketSpacing"/>
	<rule ref="Squiz.Classes.LowercaseClassKeywords"/>
	<rule ref="Squiz.Commenting.FunctionCommentThrowTag"/>
	<!-- we have too much code lacking spaces around (){} etc. 
	<rule ref="Squiz.ControlStructures.ControlSignature"/>
	-->
	<rule ref="Squiz.ControlStructures.ForEachLoopDeclaration"/>
	<rule ref="Squiz.ControlStructures.ForLoopDeclaration"/>
	<rule ref="Squiz.ControlStructures.LowercaseDeclaration"/>
	<!-- do not enforce default arg spacing for now
	<rule ref="Squiz.Functions.FunctionDeclarationArgumentSpacing"/>
	-->
	<rule ref="Squiz.Functions.FunctionDeclaration"/>
	<rule ref="Squiz.Functions.FunctionDuplicateArgument"/>
	<rule ref="Squiz.Functions.LowercaseFunctionKeywords"/>
	<rule ref="Squiz.Operators.IncrementDecrementUsage"/>
	<rule ref="Squiz.Operators.ValidLogicalOperators"/>
	<rule ref="Squiz.PHP.DisallowMultipleAssignments"/>
	<rule ref="Squiz.PHP.DisallowSizeFunctionsInLoops"/>
	<rule ref="Squiz.PHP.Eval"/>
	<rule ref="Squiz.PHP.GlobalKeyword"/>
	<rule ref="Squiz.PHP.InnerFunctions"/>
	<rule ref="Squiz.PHP.LowercasePHPFunctions"/>
	<rule ref="Squiz.PHP.NonExecutableCode"/>
	<rule ref="Squiz.Scope.MemberVarScope"/>
	<rule ref="Squiz.Scope.MethodScope"/>
	<rule ref="Squiz.Scope.StaticThisUsage"/>
	<rule ref="Squiz.Strings.DoubleQuoteUsage"/>
	<rule ref="Squiz.WhiteSpace.CastSpacing"/>
	<rule ref="Squiz.WhiteSpace.LanguageConstructSpacing"/>
	<rule ref="Squiz.WhiteSpace.LogicalOperatorSpacing"/>
	<rule ref="Squiz.WhiteSpace.OperatorSpacing"/>
	<rule ref="Squiz.WhiteSpace.ScopeClosingBrace"/>
	<rule ref="Squiz.WhiteSpace.ScopeKeywordSpacing"/>
	<rule ref="Squiz.WhiteSpace.SemicolonSpacing"/>
	<rule ref="Squiz.WhiteSpace.SuperfluousWhitespace"/>

	<!-- good stuff from "Zend" -->
	<rule ref="Zend.Files.ClosingTag"/>

</ruleset>
